#!/bin/sh -e

# Uses wf-recorder + slurp to capture a screen region
# https://github.com/ammen99/wf-recorder

# Get audio device from `pactl list | grep Name`
# Edit this to your audio device
AUDIO_DEVICE="alsa_output.pci-0000_05_00.1.hdmi-stereo.monitor"

FRAME_RATE=60

# Edit if needed to change the default save directory
SAVE_DIR="$HOME/Pictures"
FILENAME="wf-recorder_$(date +%Y-%m-%d_%H%M%S).mp4"
OUT_FILE="$SAVE_DIR/$FILENAME"

# Flags 
_audio="--audio=$AUDIO_DEVICE"
_fullscreen=false

function _print_usage() {
    # record-screen [preset] [--fullscreen]
    echo "Usage: record-screen [preset] [--fullscreen]"
    echo "Presets:"
    echo "  gif_24: - 24fps gif"
    echo "  gif_30: - 30fps gif"
    echo "  gif_60: - 60fps gif"
    echo "  mp4_30: - 30fps mp4 (no audio)"
    echo "  mp4_60: - 60fps mp4 (no audio) *Default*"
    echo "  mp4_30_audio: - 30fps mp4 with audio"
    echo "  mp4_60_audio: - 60fps mp4 with audio"
}

function ask_confirm {
    # Ask if the user want to continue on recording.
    # print the configuration
    echo "Recording with the following configuration:"
    echo "  - Preset: $1"
    echo "  - Frame rate: ${1#*_}"
    echo "  - Audio: ${2:-'no audio'}"
    echo "  - Fullscreen: ${3:-false}"
    echo "  - Output file: $OUT_FILE"
    echo "Do you want to continue? [Y/n]"
    read -r answer
    if [[ "$answer" == "Y" || "$answer" == "y" || -z "$answer" ]]; then
        echo "Recording..."
    else
        echo "Aborting..."
        exit 1
    fi
}

function preset_gif {
    $_fps=${1:-24}
    wf-recorder -g "$(slurp)" -r $_fps -f $OUT_FILE.gif
}

function preset_mp4 {
    _fps=${1:-60}
    wf-recorder -g "$(slurp)" -r $_fps -f $OUT_FILE.mp4
}

function preset_mp4_with_audio {
    _fps=${1:-60}
    wf-recorder -g "$(slurp)" -r $_fps --audio=$AUDIO_DEVICE -f $OUT_FILE.mp4
}

function preset_mp4_fullscreen {
    _fps=${1:-60}
    wf-recorder -r $_fps -f $OUT_FILE.mp4
}

function preset_mp4_fullscreen_with_audio {
    _fps=${1:-60}
    wf-recorder -r $_fps --audio=$AUDIO_DEVICE -f $OUT_FILE.mp4
}

# check if --fullscreen is passed as an argument in any order and set the flag to true
for arg in "$@"; do
    if [[ "$arg" == "--fullscreen" ]]; then
        _fullscreen=true
        break
    fi
done


# If no arguments are passed run the default preset
if [[ $# -eq 0 ]]; then
    if [[ "$_fullscreen" == true ]]; then
        ask_confirm "mp4_60" "audio" "fullscreen"
        preset_mp4_fullscreen
    else
        ask_confirm "mp4_60" "audio" "false"
        preset_mp4
    fi
elif [[ "$1" == "gif_24" || "$1" == "gif_30" || "$1" == "gif_60" ]]; then
    ask_confirm "$1" "no audio" "no"
    preset_gif $1
elif [[ "$1" == "mp4" ]]; then 
    # default to mp4_60
    ask_confirm "mp4_60" "no audio" "$_fullscreen"
    preset_mp4
elif [[ "$1" == "mp4_30" || "$1" == "mp4_60" ]]; then 
    ask_confirm "$1" "no audio" "$_fullscreen"
    if [[ "$_fullscreen" == true ]]; then
        preset_mp4_fullscreen $1
    else
        preset_mp4 $1
    fi
elif [[ "$1" == "mp4_30_audio" || "$1" == "mp4_60_audio" ]]; then
    ask_confirm "$1" "audio" "$_fullscreen"
    if [[ "$_fullscreen" == true ]]; then
        preset_mp4_fullscreen_with_audio $1
    else
        preset_mp4_with_audio $1
    fi
else
    # help
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        _print_usage
        exit 0
    fi
    _print_usage
    echo ""
    echo "ERROR: Invalid preset: $1"
    exit 1
fi 